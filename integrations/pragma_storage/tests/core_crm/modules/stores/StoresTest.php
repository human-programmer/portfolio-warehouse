<?php


namespace PragmaStorage\Test;


use PragmaStorage\iStore;
use PragmaStorage\iStores;
use PragmaStorage\Stores;
use const PragmaStorage\ALL_ARCHIVE_STATUS;
use const PragmaStorage\ARCHIVED_STATUS;

require_once __DIR__ . '/../../TestPragmaFactory.php';

class StoreMethodsTest extends \PHPUnit\Framework\TestCase {
	use ProductImportsCreator;

	public static function setUpBeforeClass(): void {
		parent::setUpBeforeClass();
		TestPragmaFactory::ifInitTest();
		TestPragmaFactory::resetStoreApp();
	}

	protected function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
	}

	function testEmptyStores(): void {
		$stores = self::createStoresWithNewAccount();
		$this->assertCount(0, $stores->getStores());
	}

	function testGetStoresByArchiveStatusesDefaultStatus(): void {
		$stores = self::createStoresWithNewAccount();
		$store1 = $stores->createStore('title1', 'addr1');
		$store2 = $stores->createStore('title1', 'addr1');
		$store3 = $stores->createStore('title1', 'addr1');
		$store4 = $stores->createStore('title1', 'addr1');
		$stores->archiveStore($store1);
		$stores->archiveStore($store2);
		$stores->archiveStore($store3);

		$default = $stores->getStores();
		$this->assertCount(1, $default);
		$this->assertTrue($store4 === $default[0]);
		$this->assertFalse($store4->isDeleted());

		$this->checkStoresByStatus($stores->getStores(ALL_ARCHIVE_STATUS), 3, 1);
	}

	function testGetStoresByArchiveStatusesAll(): void {
		$stores = self::createStoresWithNewAccount();
		$store1 = $stores->createStore('title1', 'addr1');
		$store2 = $stores->createStore('title1', 'addr1');
		$store3 = $stores->createStore('title1', 'addr1');
		$store4 = $stores->createStore('title1', 'addr1');
		$stores->archiveStore($store1);

		$default = $stores->getStores(ALL_ARCHIVE_STATUS);
		$this->assertCount(4, $default);
		$this->assertFalse($store4->isDeleted());
		$this->checkStoresByStatus($default, 1, 3);
	}

	function testGetStoresByArchiveStatusesARCHIVED(): void {
		$stores = self::createStoresWithNewAccount();
		$store1 = $stores->createStore('title1', 'addr1');
		$store2 = $stores->createStore('title1', 'addr1');
		$store3 = $stores->createStore('title1', 'addr1');
		$store4 = $stores->createStore('title1', 'addr1');
		$stores->archiveStore($store1);

		$archived = $stores->getStores(ARCHIVED_STATUS);
		$this->assertTrue($archived[0] === $store1);
		$this->assertTrue($store1->isDeleted());
	}

	private function checkStoresByStatus(array $stores, int $archived_expect_count, int $others_count): void {
		$count = 0;
		foreach ($stores as $store)
			if($store->isDeleted())
				$count++;
		$this->assertEquals($archived_expect_count, $count);
		$this->assertEquals($others_count, count($stores) - $archived_expect_count);
	}

	function testCreate(): void {
		$stores = self::createStores();
		$store1 = $stores->createStore('title1', 'addr1');
		$this->assertCount(1, $stores->getStores());
		$store2 = $stores->createStore('title2', 'addr2');
		$this->assertCount(2, $stores->getStores());
		$store3 = $stores->createStore('title3', 'addr3');
		$this->assertCount(3, $stores->getStores());
		$this->checkStore($store1, 'title1', 'addr1');
		$this->checkStore($store2, 'title2', 'addr2');
		$this->checkStore($store3, 'title3', 'addr3');
	}

	function testSave(): void {
		$stores = self::createStores();
		$store1 = $stores->createStore('title1', 'addr1');
		$this->checkStore($store1, 'title1', 'addr1');
		$store1->update(['title' => 'title1.1', 'address' => 'addr1.1']);
		$this->checkStore($store1, 'title1.1', 'addr1.1');

		$stores2 = self::createStores();
		$store1_1 = $stores2->getStore($store1->getStoreId());

		$this->assertFalse($store1 === $store1_1);
		$this->checkStore($store1_1, 'title1.1', 'addr1.1');
	}

	function testDeleteError1(): void {
		$stores = self::createStoresWithNewAccount();
		$store1 = $stores->createStore('title1', 'addr1');
		$this->expectException(\Exception::class);
		$stores->deleteStore($store1);
	}

	function testDeleteError2(): void {
		$stores = self::createStoresWithNewAccount();
		$store1 = $stores->createStore('title1', 'addr1');
		$store2 = $stores->createStore('title1', 'addr1');
		$stores->archiveStore($store2);
		$this->expectException(\Exception::class);
		$stores->deleteStore($store1);
	}

	function testArchiveError1(): void {
		$stores = self::createStoresWithNewAccount();
		$store1 = $stores->createStore('title1', 'addr1');
		$this->expectException(\Exception::class);
		$stores->archiveStore($store1);
	}

	function testDelete(): void {
		$stores = self::createStores();
		$stores->createStore('title1', 'addr1');
		$store1 = $stores->createStore('title1', 'addr1');

		$stores->deleteStore($store1);
		$this->assertTrue($store1->isDeleted());
	}

	function testDeleteToArchive(): void {
		$stores = self::createStores();
		$stores->createStore('title1', 'addr1');
		$store1 = $stores->createStore('title1', 'addr1');
		self::getUniqueProductImportForStore(null, $store1);
		$stores->deleteStore($store1);
		$this->assertTrue($store1->isDeleted());
		$this->assertTrue($store1 === $stores->getStore($store1->getStoreId()));

		$stores2 = self::createStores();
		$store1_1 = $stores2->getStore($store1->getStoreId());
		$this->assertFalse($store1_1 === $store1);
		$this->assertTrue($store1_1->getStoreId() === $store1->getStoreId());
		$this->assertTrue($store1_1->isDeleted());
	}

	function testGetStoreNotFound1(): void {
		$stores = self::createStores();
		$this->expectException(\Exception::class);
		$stores->getStore(0);
	}

	function testGetStoreFromBuffer(): void {
		$stores = self::createStores();
		$store1 = self::createTestStore($stores);
		$store2 = self::createTestStore($stores);
		$store3 = self::createTestStore($stores);

		$this->assertTrue($store1 === $stores->getStore($store1->getStoreId()));
		$this->assertTrue($store2 === $stores->getStore($store2->getStoreId()));
		$this->assertTrue($store3 === $stores->getStore($store3->getStoreId()));
	}

	function testGetStoreFromDb(): void {
		$stores = self::createStores();
		$store1 = self::createTestStore();
		$store2 = self::createTestStore();
		$store3 = self::createTestStore();

		$this->assertTrue($store1 !== $stores->getStore($store1->getStoreId()));
		$this->compareStores($store1, $stores->getStore($store1->getStoreId()));

		$this->assertTrue($store2 !== $stores->getStore($store2->getStoreId()));
		$this->compareStores($store2, $stores->getStore($store2->getStoreId()));

		$this->assertTrue($store3 !== $stores->getStore($store3->getStoreId()));
		$this->compareStores($store3, $stores->getStore($store3->getStoreId()));
	}

	function testArchiveStore(): void {
		$stores = self::createStores();
		$store1 = self::createTestStore();
		$this->assertFalse($store1->isDeleted());

		$stores->archiveStore($store1);
		$this->assertTrue($store1->isDeleted());

		$stores2 = self::createStores();
		$store1_1 = $stores2->getStore($store1->getStoreId());
		$this->assertFalse($store1 === $store1_1);
		$this->assertTrue($store1->getStoreId() === $store1_1->getStoreId());
		$this->assertTrue($store1_1->isDeleted());
	}

	private function checkStore(iStore $actual, string $title, string $addr): void {
		$this->assertEquals($title, $actual->getTitle());
		$this->assertEquals($addr, $actual->getAddress());
	}

	private function compareStores(iStore $expect, iStore $actual): void {
		$this->assertEquals($expect->getStoreId(), $actual->getStoreId());
		$this->assertEquals($expect->getTitle(), $actual->getTitle());
		$this->assertEquals($expect->getAddress(), $actual->getAddress());
	}

	private function createTestStore(iStores $stores = null): iStore {
		$stores = $stores ?? self::createStores();
		return $stores->createStore(uniqid('store'), uniqid('store'));
	}

	static function createStoresWithNewAccount(): Stores {
		return new Stores(TestPragmaFactory::createStoreAppWithNewAccount());
	}

	static function createStores(): Stores {
		return new Stores(TestPragmaFactory::getStoreApp());
	}
}